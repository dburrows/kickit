#!/usr/bin/env node

/* eslint no-process-exit:0 */

'use strict';
var extend = require('extend');
var debug = require('debug')('kickit');
var program = require('commander');
var Promise = require('bluebird');
var fs = require('fs');
var findup = require('findup-sync');
var chalk = require('chalk');
var exec = Promise.promisify(require('child_process').exec);
var spawn = require('child_process').spawn;
var path = require('path');
var _ = require('lodash');

var version = require('../package.json').version;
var completedProcesses = [];
var availableColors = [
  'green',
  'yellow',
  'blue',
  'magenta',
  'cyan',
  'white',
  'gray'
];

// \u001b - <Esc> char
// <ESC>[0m - Reset all Display attributes
// <ESC>[0G - Cursor to left edge.
// <ESC>[2K - Erase line
// some escape sequences do things like return to the start of the line
// so they delete the process label, we'll remove them with this regex
var troublesomeEscapeSequences = /\u001b\[0m|\u001b\[2K|\u001b\[0G/g;
var fakeCR = /\u001b\[2K\u001b\[0G/g;


// naive implementation of buffered output
// which we need to make our regexes work properly
var outBuffer = '';

var buffers = {};

//.replace(/(^|\n)([^\n]+)/g, function( match, group1, group2 ) {

function _writeBuffers() {
  Object.keys(buffers).forEach(function(key, index) {
    var bufferedData =  buffers[key];
    if (bufferedData ) {
      process.stdout.write( outFormat(key, index, bufferedData) );
      buffers[key] = '';
    }
  });
}

var writeBuffers = _.debounce(_writeBuffers, 500, {}, 1000)

function outFormat(key, index, string) {
  var prefix = colorizeMsg(index, key + ': ')

  // @TODO this is not perfect, but not sure if we can remove more newlines without
  //       damaging input formatting
  var outStr = '\n' + string

  return outStr
    .replace(/\n*\x1b\[2K\s*\x1b\[0G\n*/g, '\n')
    .replace(/\n+/g, '\n' + prefix)
    .replace( /\u001b\[2K|\u001b\[0G/g, '' );

}

// function outFormat(key, index, string) {
//   var prefix = colorizeMsg(index, key + ': ')

//   return string
//     .replace(/\x1b\[2K\s*\x1b\[0G/g, '\n')
//     .replace( /\u001b\[0m|\u001b\[2K|\u001b\[0G/g, '' )
//     .replace(/^/, '\n')
//     .replace(/(^|\n)([^\n]+)/g, function( match, group1, group2 ) {
//       return colorizeMsg(index, group1 + ( key + ': ' )) + group2;
//     })
// }

function bufferWrite(handle, data) {
  if (data === '') { return };
  buffers[handle] = buffers[handle] || "";
  buffers[handle] = buffers[handle] + data;
  writeBuffers();
};





program
  .version(version)
  .option('-c, --config <path>', 'config file path')
  .option('-e, --env <path>', 'environment file path')
  .parse(process.argv);

debug('config file: %s', program.config);
debug('env file: %s', program.env);

// main

var childProcesses = require( validateConfigFile(program.config) );
var envFilePath = validateEnvFile(program.env);

setEnv(envFilePath)
.then(spawnProcesses(childProcesses))
.then(pipeStdIn)
.catch(function( err ) {
  console.log('Error:', err);
});

// clean up any running processes on exit

function exitHandler(options, err) {
  childProcesses.forEach(function(cp){
    if(cp.process && !cp.process.exitCode) {
      cp.process.kill();
    }
  });

  if (err) {
    console.log(err.stack);
  }

  if (options.exit) {
    process.stdout.write('\u001b[0m\n');
    process.exit();
  }
}

//do something when app is closing
process.on( 'exit', exitHandler.bind( null, {} ) );

//catches ctrl+c event
process.on( 'SIGINT', exitHandler.bind(null, { exit: true }) );

//catches uncaught exceptions
process.on( 'uncaughtException', exitHandler.bind(null, { exit: true }));


// functions

function validateConfigFile(configPath) {

  var json = configPath ? path.resolve(configPath) : findup('kickfile.json');
  var js = configPath ? path.resolve(configPath) : findup('kickfile.js');

  var fp = js || json;

  if (fp && fs.existsSync(fp)) {
    return fp;
  } else {
    terminateProgram('Unable to find config file\n');
  }
  // TODO: check handles are unique, exit if not
}

function validateEnvFile(filePath) {
  var fp = filePath ? path.resolve(filePath) : undefined;
  if (fp && !fs.existsSync(fp)) {
    terminateProgram('Unable to find env file\n');
  } else {
    return fp;
  }
  // TODO: check envars are unique, warn if not
}

function setEnv(filePath) {
  if (!filePath) {
    return Promise.resolve();
  } else {
    return exec('source ' + filePath + ' && printenv', { cwd: filePath.replace(/\/.*/, '') })
    .then( function(output) {
      output[0].split('\n').forEach(function( line ) {
        var parts = line.split('=');
        process.env[ parts[0] ] = parts[1];
      });
      return;
    });
  }
}


function spawnProcesses(processes) {
  // generic stdout & stderr
  processes.forEach(function( cp, i ) {
    if (!cp.hasOwnProperty('waitOn')) {
      spawnProcess(cp, i);
    }
  });
}


function pipeStdIn() {

  process.stdin.on('data', function( chunk ) {
    var s = chunk.toString('utf8');
    var cp = childProcesses.filter(function( p ) {
      return typeof p.handle === 'string' && ( new RegExp('^' + p.handle + '\\.') ).test(s);
    })[ 0 ];

    if ( !cp ) {
      return console.log(chalk.red('No target for input'));
    }

    var cmd = s.substring(cp.handle.length + 1);
    cp.process.stdin.write(cmd);
  });

}

function spawnProcess(cp, i) {
  _writeBuffers();
  // check to see if the bin exists
  commandExists(cp)
  .then(function() {
    bufferWrite(cp.handle, '\n>>> START');

    var envars = extend(process.env, cp.spawn.env);
    var defaultArgs = ['-q', '/dev/null', cp.spawn.command];
    var cmdArgs = defaultArgs.concat( cp.spawn.args );

    cp.process = spawn(
      'script',
      cmdArgs,
      {
        env: envars,
        cwd: cp.spawn.cwd
      }
    );

    cp.process.stdout.on('data', function( data ) {
      bufferWrite(cp.handle, data.toString('utf8'));
    });

    cp.process.stderr.on('data', function( data ) {
      bufferWrite(cp.handle, data.toString('utf8'));
    });

    cp.process.on('error', function(err) {
      console.log(colorizeMsg(i, cp.handle + ": ") + chalk.red('Exited with Error'));
      console.log(err);
    });

    cp.process.on('exit', function(code) {
      if (code !== 0) {
        process.stdout.write(
          colorizeMsg(i, cp.handle + ': ') +
          chalk.red('Exited with error code: ' + code + '\n')
        );
      } else {
         bufferWrite(cp.handle, '\n>>> FINISH');
      }

      if (completedProcesses.indexOf(cp.handle) < 0) {
        completedProcesses.push(cp.handle);

        childProcesses.forEach(function( cp2, i2 ) {

          if (
            cp2.hasOwnProperty('waitOn') &&
            (typeof cp2.waitOn === 'string') &&
            cp2.waitOn === cp.handle
          ) {
            spawnProcess(cp2, i2);
          }



          if (
            cp2.hasOwnProperty('waitOn') &&
            isArray(cp2.waitOn)
          ) {

            var allStarted = _.every( cp2.waitOn, function( waitProcessHandle ) {
                var isFinished = ( completedProcesses.indexOf( waitProcessHandle) > -1 );
                return isFinished;
            });

            if ( allStarted) {
              spawnProcess(cp2, i2);
            }

          }

        });

        if (completedProcesses.length === childProcesses.length) {
          process.exit();
        }
      }

    });

  })
  .catch(function(e) {
    console.log(
      colorizeMsg(i, cp.handle + ': ') +
      chalk.red("command %s failed to start"), chalk.bold(cp.spawn.command) +
      chalk.red(e)
    );
    debug(e.stack);
  });
}

function commandExists(cp) {
  return exec('command -v ' + cp.spawn.command + ' >/dev/null 2>&1 || { echo >&2; exit 1; }');
}

function terminateProgram(msg) {
  console.log(chalk.red(msg));
  process.exit(99);
}

function colorizeMsg(i, msg) {
  return chalk[availableColors[i % availableColors.length]](msg);
}

function isArray(someVar) {
  if( Object.prototype.toString.call( someVar ) === '[object Array]' ) {
      return true;
  } else {
    return false;
  }
}
